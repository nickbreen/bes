load("@rules_java//java:java_single_jar.bzl", "java_single_jar")
load("@rules_java//java:java_import.bzl", "java_import")
load("@rules_jvm_external//:defs.bzl", "artifact")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_push", "oci_load")
load("@rules_pkg//:pkg.bzl", "pkg_tar")
load("@rules_unused_deps//:rules.bzl", "unused_deps_test")

# Hack to get the transitive dependencies of the buildeventstream proto
java_single_jar(
    name = "buildeventstream-uber",
    deps = [
        "@bazel//src/main/java/com/google/devtools/build/lib/buildeventstream/proto:build_event_stream_java_proto",
        "@googleapis//google/devtools/build/v1:build_java_grpc",
        "@com_google_protobuf//java/util:util",  # JSON formatter
    ],
)

java_import(
    name = "buildeventstream",
    jars = [":buildeventstream-uber"],
)

oci_push(
    name = "bes.push",
    image = ":bes.img",
    remote_tags = ["latest"],
    repository = "ghcr.io/nickbreen/bes",
)

# Note: the docker snap has access to ~, but not hidden files/dirs, so it
# cannot see ~/.cache which is where bazel-bin/bes.load/tarball.tar really is.
# So when using the docker snap, one must load it via stdin:
#     docker load < bazel-bin/bes.load/tarball.tar
# Rather than with:
#     bazel run bes.load
oci_load(
    name = "bes.load",
    image = ":bes.img",
    repo_tags = ["ghcr.io/nickbreen/bes:latest"],
)

oci_image(
    name = "bes.img",
    base = "@jre",
    cmd = [],
    entrypoint = [
        "java",
        "-jar",
        "bes_deploy.jar",
    ],
    tars = [":bes.tar"],
)

pkg_tar(
    name = "bes.tar",
    srcs = [":bes_deploy.jar"],
)

java_binary(
    name = "bes",
    main_class = "kiwi.breen.bes.BesServer",
    runtime_deps = [
        ":main",
        artifact("com.h2database:h2"),
        artifact("com.mysql:mysql-connector-j"),
        artifact("org.mariadb.jdbc:mariadb-java-client"),
        artifact("org.postgresql:postgresql"),
        artifact("org.xerial:sqlite-jdbc"),
    ],
)

java_library(
    name = "main",
    srcs = glob(["src/main/java/**/*.java"]),
    resources = glob(["src/main/resources/**"]),
    runtime_deps = [
        artifact("io.grpc:grpc-netty"),
    ],
    deps = [
        ":domain",
        ":buildeventstream",
        artifact("org.jcommander:jcommander"),
        artifact("com.mchange:c3p0"),
    ],
)

unused_deps_test(
    name = "main_unused_deps",
    subject = ":main",
)

java_library(
    name = "domain",
    srcs = glob(["src/domain/java/**/*.java"]),
    deps = [
        ":buildeventstream",
    ],
)

unused_deps_test(
    name = "domain_unused_deps",
    subject = ":domain",
)

java_binary(
    name = "bec",
    testonly = True,
    main_class = "kiwi.breen.bes.BesClient",
    runtime_deps = [":test-support"],
)

java_library(
    name = "test-support",
    testonly = True,
    srcs = glob(["src/test-support/java/**/*.java"]),
    resources = glob(["src/test-support/resources/**"]),
    deps = [
        ":domain",
        ":buildeventstream",
        artifact("org.hamcrest:hamcrest"),
        artifact("org.jcommander:jcommander"),
    ],
)

unused_deps_test(
    name = "test-support_unused_deps",
    subject = ":test-support",
)

java_test(
    name = "test",
    size = "small",
    srcs = glob(["src/test/java/**/*.java"]),
    test_class = "kiwi.breen.bes.TestSuite",
    runtime_deps = [
        artifact("org.glassfish:javax-json"),
    ],
    deps = [
        ":domain",
        ":test-support",
        ":buildeventstream",
        artifact("javax.json:javax.json-api"),
        artifact("junit:junit"),
        artifact("org.assertj:assertj-core"),
        artifact("org.hamcrest:hamcrest"),
    ],
)

unused_deps_test(
    name = "test_unused_deps",
    subject = ":test",
)

java_test(
    name = "integration-test",
    size = "medium",
    srcs = glob(["src/integration-test/java/**/*.java"]),
    test_class = "kiwi.breen.bes.IntegrationTestSuite",
    runtime_deps = [
        artifact("com.h2database:h2"),
        artifact("com.mysql:mysql-connector-j"),
        artifact("org.mariadb.jdbc:mariadb-java-client"),
        artifact("org.postgresql:postgresql"),
        artifact("org.testcontainers:mariadb"),
        artifact("org.testcontainers:mysql"),
        artifact("org.testcontainers:postgresql"),
        artifact("org.testcontainers:testcontainers"),
        artifact("org.xerial:sqlite-jdbc"),
    ],
    deps = [
        ":domain",
        ":main",
        ":test-support",
        ":buildeventstream",
        artifact("junit:junit"),
        artifact("org.hamcrest:hamcrest"),
    ],
)

unused_deps_test(
    name = "integration-test_unused_deps",
    subject = ":integration-test",
)

java_test(
    name = "acceptance-test",
    srcs = glob(["src/acceptance-test/java/**"]),
    data = [
        ":bec_deploy.jar",
        ":bes_deploy.jar",
    ],
    jvm_flags = [
        "-Dbec.uber.jar=$(rootpath :bec_deploy.jar)",
        "-Dbes.uber.jar=$(rootpath :bes_deploy.jar)",
    ],
    test_class = "kiwi.breen.bes.AcceptanceTestSuite",
    deps = [
        ":domain",
        ":main",
        ":test-support",
        ":buildeventstream",
        artifact("junit:junit"),
        artifact("org.hamcrest:hamcrest"),
        artifact("org.testcontainers:testcontainers"),
        artifact("org.testcontainers:postgresql"),
    ],
    runtime_deps = [
        artifact("org.xerial:sqlite-jdbc"),
        artifact("com.mysql:mysql-connector-j"),
        artifact("org.mariadb.jdbc:mariadb-java-client"),
        artifact("org.postgresql:postgresql"),
        artifact("com.h2database:h2"),
    ],
)

unused_deps_test(
    name = "acceptance-test_unused_deps",
    subject = ":acceptance-test",
)
